// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: distributor.capnp

#include "distributor.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<33> b_d7ee37729c17b502 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      2, 181,  23, 156, 114,  55, 238, 215,
     18,   0,   0,   0,   3,   0,   0,   0,
    240, 205, 171, 239, 205, 171, 239, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  71,   0,   0,   0,
     85,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116, 114, 105,  98, 117,
    116, 111, 114,  46,  99,  97, 112, 110,
    112,  58,  68, 105, 115, 116, 114, 105,
     98, 117, 116, 111, 114,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
     41,  54, 191, 157,  28, 112, 162, 148,
      1,   0,   0,   0,  66,   0,   0,   0,
     80, 111, 100,  73, 110, 102, 111,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     27,  79,  27, 250, 126, 125,   2, 148,
     22, 222, 224, 137, 144, 138, 254, 155,
     17,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 101, 114,
     80, 111, 100,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_d7ee37729c17b502 = b_d7ee37729c17b502.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d7ee37729c17b502[] = {
  &s_94027d7efa1b4f1b,
  &s_9bfe8a9089e0de16,
};
static const uint16_t m_d7ee37729c17b502[] = {0};
const ::capnp::_::RawSchema s_d7ee37729c17b502 = {
  0xd7ee37729c17b502, b_d7ee37729c17b502.words, 33, d_d7ee37729c17b502, m_d7ee37729c17b502,
  2, 1, nullptr, nullptr, nullptr, { &s_d7ee37729c17b502, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<95> b_94a2701c9dbf3629 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     41,  54, 191, 157,  28, 112, 162, 148,
     30,   0,   0,   0,   1,   0,   3,   0,
      2, 181,  23, 156, 114,  55, 238, 215,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116, 114, 105,  98, 117,
    116, 111, 114,  46,  99,  97, 112, 110,
    112,  58,  68, 105, 115, 116, 114, 105,
     98, 117, 116, 111, 114,  46,  80, 111,
    100,  73, 110, 102, 111,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   0,   0,   0,   3,   0,   1,   0,
    152,   0,   0,   0,   2,   0,   1,   0,
    105, 112,  65, 100, 100, 114, 101, 115,
    115,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 114, 116,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 114, 101, 115,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 104, 114, 101,  97, 100, 115,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114,  97, 109,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_94a2701c9dbf3629 = b_94a2701c9dbf3629.words;
#if !CAPNP_LITE
static const uint16_t m_94a2701c9dbf3629[] = {2, 0, 1, 4, 3};
static const uint16_t i_94a2701c9dbf3629[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_94a2701c9dbf3629 = {
  0x94a2701c9dbf3629, b_94a2701c9dbf3629.words, 95, nullptr, m_94a2701c9dbf3629,
  0, 5, i_94a2701c9dbf3629, nullptr, nullptr, { &s_94a2701c9dbf3629, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_94027d7efa1b4f1b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     27,  79,  27, 250, 126, 125,   2, 148,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116, 114, 105,  98, 117,
    116, 111, 114,  46,  99,  97, 112, 110,
    112,  58,  68, 105, 115, 116, 114, 105,
     98, 117, 116, 111, 114,  46, 114, 101,
    103, 105, 115, 116, 101, 114,  80, 111,
    100,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 100,  73, 110, 102, 111,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     41,  54, 191, 157,  28, 112, 162, 148,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_94027d7efa1b4f1b = b_94027d7efa1b4f1b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_94027d7efa1b4f1b[] = {
  &s_94a2701c9dbf3629,
};
static const uint16_t m_94027d7efa1b4f1b[] = {0};
static const uint16_t i_94027d7efa1b4f1b[] = {0};
const ::capnp::_::RawSchema s_94027d7efa1b4f1b = {
  0x94027d7efa1b4f1b, b_94027d7efa1b4f1b.words, 35, d_94027d7efa1b4f1b, m_94027d7efa1b4f1b,
  1, 1, i_94027d7efa1b4f1b, nullptr, nullptr, { &s_94027d7efa1b4f1b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_9bfe8a9089e0de16 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     22, 222, 224, 137, 144, 138, 254, 155,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116, 114, 105,  98, 117,
    116, 111, 114,  46,  99,  97, 112, 110,
    112,  58,  68, 105, 115, 116, 114, 105,
     98, 117, 116, 111, 114,  46, 114, 101,
    103, 105, 115, 116, 101, 114,  80, 111,
    100,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9bfe8a9089e0de16 = b_9bfe8a9089e0de16.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9bfe8a9089e0de16 = {
  0x9bfe8a9089e0de16, b_9bfe8a9089e0de16.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9bfe8a9089e0de16, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::Distributor::RegisterPodParams,  ::Distributor::RegisterPodResults>
Distributor::Client::registerPodRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Distributor::RegisterPodParams,  ::Distributor::RegisterPodResults>(
      0xd7ee37729c17b502ull, 0, sizeHint, {true});
}
::kj::Promise<void> Distributor::Server::registerPod(RegisterPodContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "distributor.capnp:Distributor", "registerPod",
      0xd7ee37729c17b502ull, 0);
}
::capnp::Capability::Server::DispatchCallResult Distributor::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xd7ee37729c17b502ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("distributor.capnp:Distributor", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Distributor::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        registerPod(::capnp::Capability::Server::internalGetTypedContext<
             ::Distributor::RegisterPodParams,  ::Distributor::RegisterPodResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "distributor.capnp:Distributor",
          0xd7ee37729c17b502ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Distributor
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Distributor::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Distributor::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Distributor::PodInfo
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Distributor::PodInfo::_capnpPrivate::dataWordSize;
constexpr uint16_t Distributor::PodInfo::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Distributor::PodInfo::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Distributor::PodInfo::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Distributor::RegisterPodParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Distributor::RegisterPodParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Distributor::RegisterPodParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Distributor::RegisterPodParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Distributor::RegisterPodParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Distributor::RegisterPodResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Distributor::RegisterPodResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Distributor::RegisterPodResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Distributor::RegisterPodResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Distributor::RegisterPodResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



