// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: scheduler.capnp

#include "scheduler.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<54> b_d8ef62d70bc2df10 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     16, 223, 194,  11, 215,  98, 239, 216,
     16,   0,   0,   0,   3,   0,   0,   0,
    243, 205, 171, 239, 205, 171, 239, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0, 135,   0,   0,   0,
    169,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  99, 104, 101, 100, 117, 108, 101,
    114,  46,  99,  97, 112, 110, 112,  58,
     83,  99, 104, 101, 100, 117, 108, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   1,   0,   1,   0,
     28, 189,  44,   3, 103,  36, 203, 247,
     17,   0,   0,   0,  66,   0,   0,   0,
    185, 223,  76, 130,  76, 166,  62, 212,
     13,   0,   0,   0, 138,   0,   0,   0,
    141, 130, 236, 111, 184, 134,  59, 211,
     17,   0,   0,   0,  74,   0,   0,   0,
     82, 101, 113, 117, 101, 115, 116,   0,
     87, 111, 114, 107, 108, 111,  97, 100,
     82, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     87, 111, 114, 107, 108, 111,  97, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     35, 197, 218, 171, 249, 136, 168, 175,
     35,  14,  50,  35, 255, 247,  60, 180,
     49,   0,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    170, 172, 155, 255, 254, 119, 185, 142,
    156,  94,  17, 126, 118, 169, 170, 181,
     33,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
    115,  99, 104, 101, 100, 117, 108, 101,
     87, 111, 114, 107,  82, 101, 113, 117,
    101, 115, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  87, 111, 114, 107, 108,
    111,  97, 100,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_d8ef62d70bc2df10 = b_d8ef62d70bc2df10.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d8ef62d70bc2df10[] = {
  &s_8eb977feff9bacaa,
  &s_afa888f9abdac523,
  &s_b43cf7ff23320e23,
  &s_b5aaa9767e115e9c,
};
static const uint16_t m_d8ef62d70bc2df10[] = {1, 0};
const ::capnp::_::RawSchema s_d8ef62d70bc2df10 = {
  0xd8ef62d70bc2df10, b_d8ef62d70bc2df10.words, 54, d_d8ef62d70bc2df10, m_d8ef62d70bc2df10,
  4, 2, nullptr, nullptr, nullptr, { &s_d8ef62d70bc2df10, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<85> b_f7cb2467032cbd1c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     28, 189,  44,   3, 103,  36, 203, 247,
     26,   0,   0,   0,   1,   0,   2,   0,
     16, 223, 194,  11, 215,  98, 239, 216,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  99, 104, 101, 100, 117, 108, 101,
    114,  46,  99,  97, 112, 110, 112,  58,
     83,  99, 104, 101, 100, 117, 108, 101,
    114,  46,  82, 101, 113, 117, 101, 115,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   0,   0,   0,   3,   0,   1,   0,
    128,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
     97, 114, 114,  97, 121,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 114,  97, 116, 105, 111,
    110,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 114,  97, 110, 100,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 105, 109, 101, 115, 116,  97, 109,
    112,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f7cb2467032cbd1c = b_f7cb2467032cbd1c.words;
#if !CAPNP_LITE
static const uint16_t m_f7cb2467032cbd1c[] = {0, 2, 1, 3};
static const uint16_t i_f7cb2467032cbd1c[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_f7cb2467032cbd1c = {
  0xf7cb2467032cbd1c, b_f7cb2467032cbd1c.words, 85, nullptr, m_f7cb2467032cbd1c,
  0, 4, i_f7cb2467032cbd1c, nullptr, nullptr, { &s_f7cb2467032cbd1c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_d43ea64c824cdfb9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    185, 223,  76, 130,  76, 166,  62, 212,
     26,   0,   0,   0,   1,   0,   0,   0,
     16, 223, 194,  11, 215,  98, 239, 216,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  99, 104, 101, 100, 117, 108, 101,
    114,  46,  99,  97, 112, 110, 112,  58,
     83,  99, 104, 101, 100, 117, 108, 101,
    114,  46,  87, 111, 114, 107, 108, 111,
     97, 100,  82, 101, 115, 112, 111, 110,
    115, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    119, 111, 114, 107, 108, 111,  97, 100,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    141, 130, 236, 111, 184, 134,  59, 211,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d43ea64c824cdfb9 = b_d43ea64c824cdfb9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d43ea64c824cdfb9[] = {
  &s_d33b86b86fec828d,
};
static const uint16_t m_d43ea64c824cdfb9[] = {0};
static const uint16_t i_d43ea64c824cdfb9[] = {0};
const ::capnp::_::RawSchema s_d43ea64c824cdfb9 = {
  0xd43ea64c824cdfb9, b_d43ea64c824cdfb9.words, 40, d_d43ea64c824cdfb9, m_d43ea64c824cdfb9,
  1, 1, i_d43ea64c824cdfb9, nullptr, nullptr, { &s_d43ea64c824cdfb9, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_d33b86b86fec828d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    141, 130, 236, 111, 184, 134,  59, 211,
     26,   0,   0,   0,   1,   0,   0,   0,
     16, 223, 194,  11, 215,  98, 239, 216,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  99, 104, 101, 100, 117, 108, 101,
    114,  46,  99,  97, 112, 110, 112,  58,
     83,  99, 104, 101, 100, 117, 108, 101,
    114,  46,  87, 111, 114, 107, 108, 111,
     97, 100,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
     97, 114, 114,  97, 121, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     28, 189,  44,   3, 103,  36, 203, 247,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d33b86b86fec828d = b_d33b86b86fec828d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d33b86b86fec828d[] = {
  &s_f7cb2467032cbd1c,
};
static const uint16_t m_d33b86b86fec828d[] = {0};
static const uint16_t i_d33b86b86fec828d[] = {0};
const ::capnp::_::RawSchema s_d33b86b86fec828d = {
  0xd33b86b86fec828d, b_d33b86b86fec828d.words, 38, d_d33b86b86fec828d, m_d33b86b86fec828d,
  1, 1, i_d33b86b86fec828d, nullptr, nullptr, { &s_d33b86b86fec828d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_afa888f9abdac523 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     35, 197, 218, 171, 249, 136, 168, 175,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  99, 104, 101, 100, 117, 108, 101,
    114,  46,  99,  97, 112, 110, 112,  58,
     83,  99, 104, 101, 100, 117, 108, 101,
    114,  46, 115,  99, 104, 101, 100, 117,
    108, 101,  87, 111, 114, 107,  82, 101,
    113, 117, 101, 115, 116,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     28, 189,  44,   3, 103,  36, 203, 247,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_afa888f9abdac523 = b_afa888f9abdac523.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_afa888f9abdac523[] = {
  &s_f7cb2467032cbd1c,
};
static const uint16_t m_afa888f9abdac523[] = {0};
static const uint16_t i_afa888f9abdac523[] = {0};
const ::capnp::_::RawSchema s_afa888f9abdac523 = {
  0xafa888f9abdac523, b_afa888f9abdac523.words, 35, d_afa888f9abdac523, m_afa888f9abdac523,
  1, 1, i_afa888f9abdac523, nullptr, nullptr, { &s_afa888f9abdac523, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_b43cf7ff23320e23 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     35,  14,  50,  35, 255, 247,  60, 180,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  99, 104, 101, 100, 117, 108, 101,
    114,  46,  99,  97, 112, 110, 112,  58,
     83,  99, 104, 101, 100, 117, 108, 101,
    114,  46, 115,  99, 104, 101, 100, 117,
    108, 101,  87, 111, 114, 107,  82, 101,
    113, 117, 101, 115, 116,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_b43cf7ff23320e23 = b_b43cf7ff23320e23.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b43cf7ff23320e23 = {
  0xb43cf7ff23320e23, b_b43cf7ff23320e23.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b43cf7ff23320e23, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_8eb977feff9bacaa = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    170, 172, 155, 255, 254, 119, 185, 142,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  99, 104, 101, 100, 117, 108, 101,
    114,  46,  99,  97, 112, 110, 112,  58,
     83,  99, 104, 101, 100, 117, 108, 101,
    114,  46, 103, 101, 116,  87, 111, 114,
    107, 108, 111,  97, 100,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8eb977feff9bacaa = b_8eb977feff9bacaa.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_8eb977feff9bacaa = {
  0x8eb977feff9bacaa, b_8eb977feff9bacaa.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_8eb977feff9bacaa, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_b5aaa9767e115e9c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    156,  94,  17, 126, 118, 169, 170, 181,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  99, 104, 101, 100, 117, 108, 101,
    114,  46,  99,  97, 112, 110, 112,  58,
     83,  99, 104, 101, 100, 117, 108, 101,
    114,  46, 103, 101, 116,  87, 111, 114,
    107, 108, 111,  97, 100,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    185, 223,  76, 130,  76, 166,  62, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b5aaa9767e115e9c = b_b5aaa9767e115e9c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b5aaa9767e115e9c[] = {
  &s_d43ea64c824cdfb9,
};
static const uint16_t m_b5aaa9767e115e9c[] = {0};
static const uint16_t i_b5aaa9767e115e9c[] = {0};
const ::capnp::_::RawSchema s_b5aaa9767e115e9c = {
  0xb5aaa9767e115e9c, b_b5aaa9767e115e9c.words, 35, d_b5aaa9767e115e9c, m_b5aaa9767e115e9c,
  1, 1, i_b5aaa9767e115e9c, nullptr, nullptr, { &s_b5aaa9767e115e9c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::Scheduler::ScheduleWorkRequestParams,  ::Scheduler::ScheduleWorkRequestResults>
Scheduler::Client::scheduleWorkRequestRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Scheduler::ScheduleWorkRequestParams,  ::Scheduler::ScheduleWorkRequestResults>(
      0xd8ef62d70bc2df10ull, 0, sizeHint, {true});
}
::kj::Promise<void> Scheduler::Server::scheduleWorkRequest(ScheduleWorkRequestContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "scheduler.capnp:Scheduler", "scheduleWorkRequest",
      0xd8ef62d70bc2df10ull, 0);
}
::capnp::Request< ::Scheduler::GetWorkloadParams,  ::Scheduler::GetWorkloadResults>
Scheduler::Client::getWorkloadRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Scheduler::GetWorkloadParams,  ::Scheduler::GetWorkloadResults>(
      0xd8ef62d70bc2df10ull, 1, sizeHint, {true});
}
::kj::Promise<void> Scheduler::Server::getWorkload(GetWorkloadContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "scheduler.capnp:Scheduler", "getWorkload",
      0xd8ef62d70bc2df10ull, 1);
}
::capnp::Capability::Server::DispatchCallResult Scheduler::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xd8ef62d70bc2df10ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("scheduler.capnp:Scheduler", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Scheduler::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        scheduleWorkRequest(::capnp::Capability::Server::internalGetTypedContext<
             ::Scheduler::ScheduleWorkRequestParams,  ::Scheduler::ScheduleWorkRequestResults>(context)),
        false,
        false
      };
    case 1:
      return {
        getWorkload(::capnp::Capability::Server::internalGetTypedContext<
             ::Scheduler::GetWorkloadParams,  ::Scheduler::GetWorkloadResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "scheduler.capnp:Scheduler",
          0xd8ef62d70bc2df10ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Scheduler
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::Request
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::Request::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::Request::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::Request::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::Request::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::WorkloadResponse
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::WorkloadResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::WorkloadResponse::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::WorkloadResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::WorkloadResponse::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::Workload
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::Workload::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::Workload::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::Workload::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::Workload::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::ScheduleWorkRequestParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::ScheduleWorkRequestParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::ScheduleWorkRequestParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::ScheduleWorkRequestParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::ScheduleWorkRequestParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::ScheduleWorkRequestResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::ScheduleWorkRequestResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::ScheduleWorkRequestResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::ScheduleWorkRequestResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::ScheduleWorkRequestResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::GetWorkloadParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::GetWorkloadParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::GetWorkloadParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::GetWorkloadParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::GetWorkloadParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::GetWorkloadResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::GetWorkloadResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::GetWorkloadResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::GetWorkloadResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::GetWorkloadResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



