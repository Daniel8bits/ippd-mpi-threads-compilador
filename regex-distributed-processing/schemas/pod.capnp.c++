// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: pod.capnp

#include "pod.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<32> b_def431fec444a116 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     22, 161,  68, 196, 254,  49, 244, 222,
     10,   0,   0,   0,   3,   0,   0,   0,
    242, 205, 171, 239, 205, 171, 239, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   0,   0,   0,
     25,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  71,   0,   0,   0,
     81,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 100,  46,  99,  97, 112, 110,
    112,  58,  80, 111, 100,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    144, 137, 207, 252, 116, 117, 249, 214,
      1,   0,   0,   0,  74,   0,   0,   0,
     87, 111, 114, 107, 108, 111,  97, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,  64, 100,  61, 153,   9,  58, 187,
      3,  32,   1,  61, 124, 143,  45, 164,
     17,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    112, 114, 111,  99, 101, 115, 115,  87,
    111, 114, 107, 108, 111,  97, 100,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_def431fec444a116 = b_def431fec444a116.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_def431fec444a116[] = {
  &s_a42d8f7c3d012003,
  &s_bb3a09993d644074,
};
static const uint16_t m_def431fec444a116[] = {0};
const ::capnp::_::RawSchema s_def431fec444a116 = {
  0xdef431fec444a116, b_def431fec444a116.words, 32, d_def431fec444a116, m_def431fec444a116,
  2, 1, nullptr, nullptr, nullptr, { &s_def431fec444a116, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<67> b_d6f97574fccf8990 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    144, 137, 207, 252, 116, 117, 249, 214,
     14,   0,   0,   0,   1,   0,   1,   0,
     22, 161,  68, 196, 254,  49, 244, 222,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 100,  46,  99,  97, 112, 110,
    112,  58,  80, 111, 100,  46,  87, 111,
    114, 107, 108, 111,  97, 100,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     88,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
     97, 114, 114,  97, 121,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 114,  97, 116, 105, 111,
    110,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 114,  97, 110, 100,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d6f97574fccf8990 = b_d6f97574fccf8990.words;
#if !CAPNP_LITE
static const uint16_t m_d6f97574fccf8990[] = {0, 2, 1};
static const uint16_t i_d6f97574fccf8990[] = {0, 1, 2};
const ::capnp::_::RawSchema s_d6f97574fccf8990 = {
  0xd6f97574fccf8990, b_d6f97574fccf8990.words, 67, nullptr, m_d6f97574fccf8990,
  0, 3, i_d6f97574fccf8990, nullptr, nullptr, { &s_d6f97574fccf8990, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_bb3a09993d644074 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    116,  64, 100,  61, 153,   9,  58, 187,
     14,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 100,  46,  99,  97, 112, 110,
    112,  58,  80, 111, 100,  46, 112, 114,
    111,  99, 101, 115, 115,  87, 111, 114,
    107, 108, 111,  97, 100,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    119, 111, 114, 107, 108, 111,  97, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    144, 137, 207, 252, 116, 117, 249, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bb3a09993d644074 = b_bb3a09993d644074.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bb3a09993d644074[] = {
  &s_d6f97574fccf8990,
};
static const uint16_t m_bb3a09993d644074[] = {0};
static const uint16_t i_bb3a09993d644074[] = {0};
const ::capnp::_::RawSchema s_bb3a09993d644074 = {
  0xbb3a09993d644074, b_bb3a09993d644074.words, 34, d_bb3a09993d644074, m_bb3a09993d644074,
  1, 1, i_bb3a09993d644074, nullptr, nullptr, { &s_bb3a09993d644074, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_a42d8f7c3d012003 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      3,  32,   1,  61, 124, 143,  45, 164,
     14,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 100,  46,  99,  97, 112, 110,
    112,  58,  80, 111, 100,  46, 112, 114,
    111,  99, 101, 115, 115,  87, 111, 114,
    107, 108, 111,  97, 100,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_a42d8f7c3d012003 = b_a42d8f7c3d012003.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a42d8f7c3d012003 = {
  0xa42d8f7c3d012003, b_a42d8f7c3d012003.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a42d8f7c3d012003, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::Pod::ProcessWorkloadParams,  ::Pod::ProcessWorkloadResults>
Pod::Client::processWorkloadRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Pod::ProcessWorkloadParams,  ::Pod::ProcessWorkloadResults>(
      0xdef431fec444a116ull, 0, sizeHint, {true});
}
::kj::Promise<void> Pod::Server::processWorkload(ProcessWorkloadContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "pod.capnp:Pod", "processWorkload",
      0xdef431fec444a116ull, 0);
}
::capnp::Capability::Server::DispatchCallResult Pod::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xdef431fec444a116ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("pod.capnp:Pod", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Pod::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        processWorkload(::capnp::Capability::Server::internalGetTypedContext<
             ::Pod::ProcessWorkloadParams,  ::Pod::ProcessWorkloadResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "pod.capnp:Pod",
          0xdef431fec444a116ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Pod
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Pod::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Pod::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Pod::Workload
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Pod::Workload::_capnpPrivate::dataWordSize;
constexpr uint16_t Pod::Workload::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Pod::Workload::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Pod::Workload::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Pod::ProcessWorkloadParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Pod::ProcessWorkloadParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Pod::ProcessWorkloadParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Pod::ProcessWorkloadParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Pod::ProcessWorkloadParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Pod::ProcessWorkloadResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Pod::ProcessWorkloadResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Pod::ProcessWorkloadResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Pod::ProcessWorkloadResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Pod::ProcessWorkloadResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



