// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: controller.capnp

#include "controller.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<37> b_e77cc46f69a3968f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    143, 150, 163, 105, 111, 196, 124, 231,
     17,   0,   0,   0,   3,   0,   0,   0,
    239, 205, 171, 239, 205, 171, 239, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0,  71,   0,   0,   0,
    101,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108, 108,
    101, 114,  46,  99,  97, 112, 110, 112,
     58,  67, 111, 110, 116, 114, 111, 108,
    108, 101, 114,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    203, 152,  31, 111,  59, 108,  23, 232,
      9,   0,   0,   0,  66,   0,   0,   0,
    196,  23,  75, 196, 223,  92, 232, 215,
      5,   0,   0,   0,  74,   0,   0,   0,
     82, 101, 113, 117, 101, 115, 116,   0,
     82, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    189,  22,  74,  29,  18, 222,  63, 189,
      6, 200,  49,  50, 188, 113, 205, 254,
     17,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    112, 114, 111,  99, 101, 115, 115,  82,
    101, 113, 117, 101, 115, 116,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_e77cc46f69a3968f = b_e77cc46f69a3968f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e77cc46f69a3968f[] = {
  &s_bd3fde121d4a16bd,
  &s_fecd71bc3231c806,
};
static const uint16_t m_e77cc46f69a3968f[] = {0};
const ::capnp::_::RawSchema s_e77cc46f69a3968f = {
  0xe77cc46f69a3968f, b_e77cc46f69a3968f.words, 37, d_e77cc46f69a3968f, m_e77cc46f69a3968f,
  2, 1, nullptr, nullptr, nullptr, { &s_e77cc46f69a3968f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<69> b_e8176c3b6f1f98cb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    203, 152,  31, 111,  59, 108,  23, 232,
     28,   0,   0,   0,   1,   0,   1,   0,
    143, 150, 163, 105, 111, 196, 124, 231,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108, 108,
    101, 114,  46,  99,  97, 112, 110, 112,
     58,  67, 111, 110, 116, 114, 111, 108,
    108, 101, 114,  46,  82, 101, 113, 117,
    101, 115, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     88,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
     97, 114, 114,  97, 121,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 114,  97, 116, 105, 111,
    110,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 114,  97, 110, 100,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e8176c3b6f1f98cb = b_e8176c3b6f1f98cb.words;
#if !CAPNP_LITE
static const uint16_t m_e8176c3b6f1f98cb[] = {0, 2, 1};
static const uint16_t i_e8176c3b6f1f98cb[] = {0, 1, 2};
const ::capnp::_::RawSchema s_e8176c3b6f1f98cb = {
  0xe8176c3b6f1f98cb, b_e8176c3b6f1f98cb.words, 69, nullptr, m_e8176c3b6f1f98cb,
  0, 3, i_e8176c3b6f1f98cb, nullptr, nullptr, { &s_e8176c3b6f1f98cb, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_d7e85cdfc44b17c4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    196,  23,  75, 196, 223,  92, 232, 215,
     28,   0,   0,   0,   1,   0,   0,   0,
    143, 150, 163, 105, 111, 196, 124, 231,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108, 108,
    101, 114,  46,  99,  97, 112, 110, 112,
     58,  67, 111, 110, 116, 114, 111, 108,
    108, 101, 114,  46,  82, 101, 115, 112,
    111, 110, 115, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,  65, 114,
    114,  97, 121,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d7e85cdfc44b17c4 = b_d7e85cdfc44b17c4.words;
#if !CAPNP_LITE
static const uint16_t m_d7e85cdfc44b17c4[] = {0};
static const uint16_t i_d7e85cdfc44b17c4[] = {0};
const ::capnp::_::RawSchema s_d7e85cdfc44b17c4 = {
  0xd7e85cdfc44b17c4, b_d7e85cdfc44b17c4.words, 39, nullptr, m_d7e85cdfc44b17c4,
  0, 1, i_d7e85cdfc44b17c4, nullptr, nullptr, { &s_d7e85cdfc44b17c4, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_bd3fde121d4a16bd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    189,  22,  74,  29,  18, 222,  63, 189,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108, 108,
    101, 114,  46,  99,  97, 112, 110, 112,
     58,  67, 111, 110, 116, 114, 111, 108,
    108, 101, 114,  46, 112, 114, 111,  99,
    101, 115, 115,  82, 101, 113, 117, 101,
    115, 116,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    203, 152,  31, 111,  59, 108,  23, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bd3fde121d4a16bd = b_bd3fde121d4a16bd.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bd3fde121d4a16bd[] = {
  &s_e8176c3b6f1f98cb,
};
static const uint16_t m_bd3fde121d4a16bd[] = {0};
static const uint16_t i_bd3fde121d4a16bd[] = {0};
const ::capnp::_::RawSchema s_bd3fde121d4a16bd = {
  0xbd3fde121d4a16bd, b_bd3fde121d4a16bd.words, 35, d_bd3fde121d4a16bd, m_bd3fde121d4a16bd,
  1, 1, i_bd3fde121d4a16bd, nullptr, nullptr, { &s_bd3fde121d4a16bd, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_fecd71bc3231c806 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      6, 200,  49,  50, 188, 113, 205, 254,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108, 108,
    101, 114,  46,  99,  97, 112, 110, 112,
     58,  67, 111, 110, 116, 114, 111, 108,
    108, 101, 114,  46, 112, 114, 111,  99,
    101, 115, 115,  82, 101, 113, 117, 101,
    115, 116,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    196,  23,  75, 196, 223,  92, 232, 215,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fecd71bc3231c806 = b_fecd71bc3231c806.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fecd71bc3231c806[] = {
  &s_d7e85cdfc44b17c4,
};
static const uint16_t m_fecd71bc3231c806[] = {0};
static const uint16_t i_fecd71bc3231c806[] = {0};
const ::capnp::_::RawSchema s_fecd71bc3231c806 = {
  0xfecd71bc3231c806, b_fecd71bc3231c806.words, 36, d_fecd71bc3231c806, m_fecd71bc3231c806,
  1, 1, i_fecd71bc3231c806, nullptr, nullptr, { &s_fecd71bc3231c806, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::Controller::ProcessRequestParams,  ::Controller::ProcessRequestResults>
Controller::Client::processRequestRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Controller::ProcessRequestParams,  ::Controller::ProcessRequestResults>(
      0xe77cc46f69a3968full, 0, sizeHint, {true});
}
::kj::Promise<void> Controller::Server::processRequest(ProcessRequestContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "controller.capnp:Controller", "processRequest",
      0xe77cc46f69a3968full, 0);
}
::capnp::Capability::Server::DispatchCallResult Controller::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe77cc46f69a3968full:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("controller.capnp:Controller", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Controller::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        processRequest(::capnp::Capability::Server::internalGetTypedContext<
             ::Controller::ProcessRequestParams,  ::Controller::ProcessRequestResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "controller.capnp:Controller",
          0xe77cc46f69a3968full, methodId);
  }
}
#endif  // !CAPNP_LITE

// Controller
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Controller::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Controller::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Controller::Request
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Controller::Request::_capnpPrivate::dataWordSize;
constexpr uint16_t Controller::Request::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Controller::Request::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Controller::Request::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Controller::Response
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Controller::Response::_capnpPrivate::dataWordSize;
constexpr uint16_t Controller::Response::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Controller::Response::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Controller::Response::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Controller::ProcessRequestParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Controller::ProcessRequestParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Controller::ProcessRequestParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Controller::ProcessRequestParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Controller::ProcessRequestParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Controller::ProcessRequestResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Controller::ProcessRequestResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Controller::ProcessRequestResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Controller::ProcessRequestResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Controller::ProcessRequestResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



