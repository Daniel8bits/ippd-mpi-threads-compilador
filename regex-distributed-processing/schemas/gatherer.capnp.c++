// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: gatherer.capnp

#include "gatherer.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<34> b_9c708df31848d71a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     26, 215,  72,  24, 243, 141, 112, 156,
     15,   0,   0,   0,   3,   0,   0,   0,
    241, 205, 171, 239, 205, 171, 239, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  71,   0,   0,   0,
     89,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 116, 104, 101, 114, 101, 114,
     46,  99,  97, 112, 110, 112,  58,  71,
     97, 116, 104, 101, 114, 101, 114,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
      5, 174, 131, 171, 222,  63, 252, 236,
      1,   0,   0,   0, 138,   0,   0,   0,
     80, 114, 111,  99, 101, 115, 115, 105,
    110, 103,  82, 101, 115, 117, 108, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     60,  47,  41,   6, 112, 188, 201, 242,
    203, 162,  73, 255, 248, 186,  62, 197,
     17,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    103,  97, 116, 104, 101, 114,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_9c708df31848d71a = b_9c708df31848d71a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9c708df31848d71a[] = {
  &s_c53ebaf8ff49a2cb,
  &s_f2c9bc7006292f3c,
};
static const uint16_t m_9c708df31848d71a[] = {0};
const ::capnp::_::RawSchema s_9c708df31848d71a = {
  0x9c708df31848d71a, b_9c708df31848d71a.words, 34, d_9c708df31848d71a, m_9c708df31848d71a,
  2, 1, nullptr, nullptr, nullptr, { &s_9c708df31848d71a, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<71> b_ecfc3fdeab83ae05 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      5, 174, 131, 171, 222,  63, 252, 236,
     24,   0,   0,   0,   1,   0,   1,   0,
     26, 215,  72,  24, 243, 141, 112, 156,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 116, 104, 101, 114, 101, 114,
     46,  99,  97, 112, 110, 112,  58,  71,
     97, 116, 104, 101, 114, 101, 114,  46,
     80, 114, 111,  99, 101, 115, 115, 105,
    110, 103,  82, 101, 115, 117, 108, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     88,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
     97, 114, 114,  97, 121,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 101, 110, 116,  65, 100,
    100, 114, 101, 115, 115,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 101, 110, 116,  80, 111,
    114, 116,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ecfc3fdeab83ae05 = b_ecfc3fdeab83ae05.words;
#if !CAPNP_LITE
static const uint16_t m_ecfc3fdeab83ae05[] = {0, 1, 2};
static const uint16_t i_ecfc3fdeab83ae05[] = {0, 1, 2};
const ::capnp::_::RawSchema s_ecfc3fdeab83ae05 = {
  0xecfc3fdeab83ae05, b_ecfc3fdeab83ae05.words, 71, nullptr, m_ecfc3fdeab83ae05,
  0, 3, i_ecfc3fdeab83ae05, nullptr, nullptr, { &s_ecfc3fdeab83ae05, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_f2c9bc7006292f3c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     60,  47,  41,   6, 112, 188, 201, 242,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 116, 104, 101, 114, 101, 114,
     46,  99,  97, 112, 110, 112,  58,  71,
     97, 116, 104, 101, 114, 101, 114,  46,
    103,  97, 116, 104, 101, 114,  82, 101,
    115, 117, 108, 116, 115,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      5, 174, 131, 171, 222,  63, 252, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f2c9bc7006292f3c = b_f2c9bc7006292f3c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f2c9bc7006292f3c[] = {
  &s_ecfc3fdeab83ae05,
};
static const uint16_t m_f2c9bc7006292f3c[] = {0};
static const uint16_t i_f2c9bc7006292f3c[] = {0};
const ::capnp::_::RawSchema s_f2c9bc7006292f3c = {
  0xf2c9bc7006292f3c, b_f2c9bc7006292f3c.words, 34, d_f2c9bc7006292f3c, m_f2c9bc7006292f3c,
  1, 1, i_f2c9bc7006292f3c, nullptr, nullptr, { &s_f2c9bc7006292f3c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_c53ebaf8ff49a2cb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    203, 162,  73, 255, 248, 186,  62, 197,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  97, 116, 104, 101, 114, 101, 114,
     46,  99,  97, 112, 110, 112,  58,  71,
     97, 116, 104, 101, 114, 101, 114,  46,
    103,  97, 116, 104, 101, 114,  82, 101,
    115, 117, 108, 116, 115,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_c53ebaf8ff49a2cb = b_c53ebaf8ff49a2cb.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c53ebaf8ff49a2cb = {
  0xc53ebaf8ff49a2cb, b_c53ebaf8ff49a2cb.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c53ebaf8ff49a2cb, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::Gatherer::GatherResultsParams,  ::Gatherer::GatherResultsResults>
Gatherer::Client::gatherResultsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Gatherer::GatherResultsParams,  ::Gatherer::GatherResultsResults>(
      0x9c708df31848d71aull, 0, sizeHint, {true});
}
::kj::Promise<void> Gatherer::Server::gatherResults(GatherResultsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gatherer.capnp:Gatherer", "gatherResults",
      0x9c708df31848d71aull, 0);
}
::capnp::Capability::Server::DispatchCallResult Gatherer::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x9c708df31848d71aull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("gatherer.capnp:Gatherer", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Gatherer::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        gatherResults(::capnp::Capability::Server::internalGetTypedContext<
             ::Gatherer::GatherResultsParams,  ::Gatherer::GatherResultsResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "gatherer.capnp:Gatherer",
          0x9c708df31848d71aull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Gatherer
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Gatherer::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Gatherer::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Gatherer::ProcessingResult
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Gatherer::ProcessingResult::_capnpPrivate::dataWordSize;
constexpr uint16_t Gatherer::ProcessingResult::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Gatherer::ProcessingResult::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Gatherer::ProcessingResult::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Gatherer::GatherResultsParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Gatherer::GatherResultsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Gatherer::GatherResultsParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Gatherer::GatherResultsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Gatherer::GatherResultsParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Gatherer::GatherResultsResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Gatherer::GatherResultsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Gatherer::GatherResultsResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Gatherer::GatherResultsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Gatherer::GatherResultsResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



